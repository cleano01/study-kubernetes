apiVersion: apps/v1
kind: Deployment # type of manifest/resource
metadata:
  #name: name of pod
  name: goserver
  #label: type identification
  labels:
    app: goserver
spec:
  #selector: select label to replicaset
  selector: 
    #matchLabels: filter specific label
    matchLabels:
      #app: selected label name
      app: goserver 
  #replicas: quantity replica (pod) to create
  replicas: 3
  #template: bellow template of pod to create to replicas
  template: 
    metadata:
      labels:
        app: "goserver"
    spec: 
      containers:
        - name: goserver 
          image: "cleano/hello-go:v5.5.1" 
          #resources: resource of container
          resources: 
            #requests: minimum requirement to run pod
            requests:
              cpu: "0.5" #minimum cpu usage (using millicores, in this case 100 millicore)
              memory: 20Mi #minimal RAM usage
            #limits: maximum pod resource usage
            limits: 
              cpu: "0.6"
              memory: 25Mi              
              
          #startupProbe: checks if application is ready to receive to traffic
          startupProbe: 
            httpGet:
              path: /healthz #endpoint to check if application  is healthy
              port: 8000
            periodSeconds: 3 #checks the application in X and X time in seconds
            failureThreshold: 30 #quantity of errors limite to restart the application
          
          #readinessProbe: checks if application is ready to receive to traffic
          readinessProbe: 
            httpGet:
              path: /healthz #endpoint to check if application  is healthy
              port: 8000
            periodSeconds: 3 #checks the application in X and X time in seconds
            failureThreshold: 1 #quantity of errors limite to restart the application
            timeoutSeconds: 1 #time limit to endpoint /healthz to response
            #initialDelaySeconds:  10 #wait X seconds to start checking the application can receive traffic
          
          #livenessProbe: check application in times
          livenessProbe: 
            httpGet:
              path: /healthz #endpoint to check if application  is healthy
              port: 8000
            periodSeconds: 5 #checks the application in X and X time in seconds
            failureThreshold: 1 #quantity of errors limite to restart the application
            timeoutSeconds: 1 #time limit to endpoint /healthz to response
            successThreshold: 1 #number of times the application needs to say that it is "ok"
            #initialDelaySeconds: 15 #wait X seconds to start checking the application can receive traffic
          
          #envFrom: takes values of environment variable
          envFrom: 
            - configMapRef:
                name: goserver-env #takes values of environment variable named goserver-env
            - secretRef: 
                name: goserver-secret #takes values of secrety named goserver-env
          
          #volumeMounts: used to be create volumes to Pods in the container's file system
          volumeMounts: 
            - mountPath: "/go/myfamily" #path of volume
              name: config #we take the volume we created with name "config"
              readOnly: true
            - mountPath: "/go/pvc" #path of volume
              name: goserver-volume #here we are identifying our PVC
              
      #volumes: Can be mounted by containers belonging to the pod.
      volumes: #we are creating a volume here, to inject the configmap-family
        - name: config # name volume
          configMap:
            name: configmap-family #name of ConfigMap
            items:
              - key: members # key of datas
                path: "family.txt" #file that will be generated with the key data
        - name: goserver-volume #name volume
          persistentVolumeClaim:
            claimName:  goserver-pvc #name of PVC      
        
